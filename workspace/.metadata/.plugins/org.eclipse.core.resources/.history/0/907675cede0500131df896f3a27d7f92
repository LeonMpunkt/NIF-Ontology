
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;


public class SetOWLEquivalence {
	public static void main (String[] args)
	{
	    String srcClassURI = ""; // If the mapping excel file only contains Class ID, please insert the URI portion of the Class ID here
	    String targetClassURI = ""; 
		readExcel(srcClassURI, targetClassURI);
	}

public static void readExcel(String src, String target)
{
	try 
    {
        InputStream input = new BufferedInputStream(
                    new FileInputStream("NIFSTD-PRO-Mappings.xls")); //Note: Only works with xls file not xslx.
        POIFSFileSystem fs = new POIFSFileSystem( input );
        HSSFWorkbook wb = new HSSFWorkbook(fs);
        HSSFSheet sheet = wb.getSheetAt(0);
        
		
        
        String data; 
		data = "";
		ArrayList<String> srcURI = new ArrayList<String>();
        ArrayList<String> targetURI = new ArrayList<String>();
		
        Iterator rows = sheet.rowIterator();
        while( rows.hasNext() ) 
        {  
            HSSFRow row = (HSSFRow) rows.next();
            //System.out.println("\n");
            Iterator cells = row.cellIterator();
          
            while( cells.hasNext() ) 
            {
               HSSFCell cell = (HSSFCell) cells.next();
                if (cell.getColumnIndex() == 0)
            	  {
            	  	System.out.print("\n new row.\n");
            	    srcURI.add(cell.getStringCellValue());         	  	
            	  }
                else 
                	targetURI.add(cell.getStringCellValue());
                
             } //End of while block 2.
            
            
        } //End of while block 1.
        
     writeOWLEquivFile(srcURI, targetURI); 
    } // End of try block.
    
    catch ( IOException ex ) 
    {
        ex.printStackTrace();
    } // End of catch.
}

public static void writeOWLEquivFile(ArrayList srcURI, ArrayList targetURI)
	{
		String OWLStatement = "";
		Iterator srcItr = srcURI.iterator();
		Iterator targetItr = targetURI.iterator();
		
	     while(srcItr.hasNext()) // loop thro elements
	          {
	    	    System.out.println(srcItr.next()); 
		
				OWLStatement = "\n<owl:Class rdf:about=\"" + srcItr.next() + "\"/>";
				OWLStatement += "\n<owl:equivalentClass rdf:resource=\"" + targetItr.next() + "\"/>";
				OWLStatement += "\n</owl:Class>";
	          }
		/*
		OWL Equivalent Statement format:
		<owl:Class rdf:about="http://purl.obolibrary.org/obo/ERO_0000019"/>	
		  <owl:equivalentClass rdf:resource="http://ontology.neuinfo.org/NIF/DigitalEntities/NIF-Investigation.owl#nlx_inv_20090407"/>
		</owl:Class> 
		*/
	     System.out.println(OWLStatement);
	
	}

}
